	 - IF  E ELSE 
	 
	 UMA SINTAXE SIMPLES ONDE O DISPOSITIVO BASE É O BOOLEAN ( FALSE/TRUE).
		
		O QUE SÃO CONDIÇÕES BOOLEANAS: UMA EXPRESSÃO QUE APENAS RETORNE TRUE OUR FALSE.
		DENTRO DO IF, PODEMOS TORNAR ESSA CONDIÇÃO MAIS DINÂMICA COLOCANDO CONDIÇÕES, QUE SÃO: (<; >; <=; >= ; !) 
		
		* ESTRUTRA DO IF(CONDICAO BOOLEANA ){
						CODIGO; 
						} 
	ELSE - ESSA ESTRUTURA AJUDA NO ENTENDIMENTO LOGICO DO CODIGO, O RELACIONAMENTO BOOLEANO DENTRO DO IF FICA MAIS LIMPO.
		* ESTRUTRA DO IF(CONDICAO BOOLEANA ){
						CODIGO; 
						}
					  ELSE{
						PRINTF("CONDIÇÃO NÃO FOI SATISFEITA NO IF")
					  }
	OUTRAS FERRAMENTAAS MUITO UTILIZADO NO IF E ELSE SÃO OS OPERADORES: &&(E) E ||(OU)
			INT A = 10;
			INT B = TRUE;
		* ESTRUTRA DO IF(A <= 10 && B == FALSE ){
								CODIGO; 
								}
							ELSE{
								PRINTF("CONDIÇÃO NÃO FOI SATISFEITA NO IF")
							}
		
	
		
	 -  ESTRUTURAS DE CONTROLE 
			* WHILE
				- ESTRUTURA DE REPETICAO MUITO UTILIZADA. 
				- ESTRUTRA DO WHILE (CONDICAO){
								CODIGO; 
								}
				
					A CONDICAO BASE PARA O WHILE É, REPITA O PROCESSO ENQUANTO O WHILE FOR VERDADEIRO. COM ESSA CONDIÇÃO, A MELHOR MOMENTO PARA USAR ESSE PROCESSO É: QUANDO NAO SABEMOS QUANDO REPETIÇÕES SERÃO NECESSÁRIA PARA TORNAR ESSA CONDICAO VÁLIDA.
	
	- FOR O COMANDO MUITO UTILIZADO POR TODOS OS PROGRAMADORES
		* FOR 
			- ESTRUTURA DO FOR( vALOR_INICIAL; CONDICAO_FINAL; VALOR_INCREMENTO){
							CONDIGO;
							}
		É muito útil quando se sabe de antemão quantas vezes a repetição deverá ser executada.
		
    - A ESTRUTURA DO-WHILE, FUNCIONA DE FORMA SEMELHANTE AO WHILE, NO ENTANTO TEM UMA MUDANÇA FUNDAMENTAL, ELE ENTRA PELO MENOS UMA VEZ NA CONDIÇÃO DE REPETIÇÃO. 
		*DO {
		 CODIGO;
		 }WHILE(CONDICAO);
		
		
			
		
		
		
		
		
		
		
		
		
		
		
		
		